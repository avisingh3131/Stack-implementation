# Stack-implementation
// stack implementation by array
class Stack{
    int max_length=10;
    int top=-1;
    int a[]=new int[max_length];
    // to check stack is empty or not
    void isEmpty(){
        if(top==-1&&top!=max_length)
        System.out.println("Stack is empty");
    }
    //to enter the element in Stack.
    void push(int data){
        top++;
    if(top==max_length)
        System.out.println("Stack overflow");
        else
        a[top]=data;
    }
    //to remove the element from stack 
    void pop(){
        top--;
    }
    //to get the top element of the stack
    int top(){
        return a[top];
    }
    //to print the elements of the stack.
    void print(){
        for(int i=0;i<=top;i++){
             System.out.print(a[i]);
              System.out.print(" ");
        }
    }
}
public class MyClass {
    public static void main(String args[]) {
        Stack s=new Stack();
        s.isEmpty();
        s.push(1);
        s.push(2);
        s.push(3);
        s.push(4);
        s.push(5);
        s.push(6);
        s.push(7);
        s.push(8);
        s.push(9);
        s.push(10);
        s.push(11);
        s.pop();
        s.pop();
        int n=s.top();
        System.out.println("top is:- "+n );
        s.print();
    }
}
/*o/p:-Stack is empty
       Stack overflow
       top is:- 9
       1 2 3 4 5 6 7 8 9 */
